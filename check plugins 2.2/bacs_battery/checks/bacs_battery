#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
from cmk.base.check_legacy_includes.temperature import check_temperature

factory_settings["bacs_battery_default_levels"] = {
    "levels": (55, 60),
    "voltage": (14, 15),
    "voltage_lower": (10, 9),
    "temp": (40, 50),
    "temp_lower": (10, 5),
    "resistance": (15, 18),
}


def parse_bacs_battery(info):
    scale_temp = 10.0
    scale_volt = 100.0
    scale_res = 100.0
    data, _thresholds = info
    parsed = {}
    try:
        if int(data[0][0]) == 0:
            modifier = 1
        else:
            modifier = 0
    except:
        modifier = 0

    for bat_id, bat_volt, bat_temp, bat_res, bat_state in data:
        parsed[str(int(bat_id) + modifier)] = (
            int(bat_volt) / scale_volt,
            int(bat_temp) / scale_temp,
            int(bat_res) / scale_res,
            int(bat_state),
        )
    return parsed


def inventory_bacs_battery(parsed):
    for item in parsed:
        yield item, {}


def check_bacs_battery(item, params, parsed):
    if isinstance(params, tuple):
        params = {"levels": params}

    params_temp = {}
    if "temp" in params:
        params_temp["levels"] = params["temp"]
    if "levels" in params:
        params_temp["levels"] = params["levels"]
    if "temp_lower" in params:
        params_temp["levels_lower"] = params["temp_lower"]

    perfdata = []
    if item in parsed:
        data = parsed[item]
        bat_volt, bat_temp, bat_res, _bat_status = data

        yield check_temperature(bat_temp, params_temp, f"bacs_temperature_{item}")

        res_warn, res_crit = params["resistance"]
        infotext = f"resistance: {bat_res} mOhm"
        perfdata = [("resistance", bat_res, res_warn, res_crit)]

        res_status = 0
        if bat_res > res_crit:
            res_status = 2
            infotext += f"(warn/crit at {res_warn} mOhm/{res_crit} mOhm)"
        elif bat_res > res_warn:
            res_status = 1
            infotext += f"(warn/crit at {res_warn} mOhm/{res_crit} mOhm)"

        yield res_status, infotext, perfdata

        volt_warn, volt_crit = params["voltage"]
        volt_warn_lower, volt_crit_lower = params["voltage_lower"]

        infotext = f"{bat_volt:.1f} V"
        perfdata = [("voltage", bat_volt, volt_warn, volt_crit)]
        volt_status = 0
        if bat_volt < volt_crit_lower or bat_volt >= volt_crit:
            volt_status = 2
            infotext += f"(warn/crit at {volt_warn} V/{volt_crit} V)"
        elif bat_volt < volt_warn_lower or bat_volt >= volt_warn:
            volt_status = 1
            infotext += f"(warn/crit at {volt_warn} V/{volt_crit} V)"

        yield volt_status, infotext, perfdata


check_info["bacs_battery"] = {
    "check_function": check_bacs_battery,
    "inventory_function": inventory_bacs_battery,
    "parse_function": parse_bacs_battery,
    "service_description": "BACS Module %s",
    "default_levels_variable": "bacs_battery_default_levels",
    "has_perfdata": True,  # optional if available
    "group": "bacs",
    "snmp_scan_function": lambda oid: ".1.3.6.1.2.1.33" in oid(".1.3.6.1.2.1.1.2.0"),
    "snmp_info": [
        # Battery table
        (
            ".1.3.6.1.2.1.33.5.2.5.1",
            [
                1,  # bacsModuleIndex
                2,  # bacsModuleVoltage
                3,  # bacsModuleTemperture
                5,  # bacsModuleResistance
                6,  # bacsModuleState
            ],
        ),
        # threshold table
        (
            ".1.3.6.1.2.1.33.5",
            [
                1,
            ],  # thresholds
        ),
    ],
}
