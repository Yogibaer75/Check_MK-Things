#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
"""Special Agent to fetch Redfish data from management interfaces"""
# (c) Andreas Doehler <andreas.doehler@bechtle.com/andreas.doehler@gmail.com>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import json
import logging
import sys
from collections.abc import Sequence

import cmk.utils.password_store
import redfish
import urllib3
from cmk.special_agents.utils.agent_common import special_agent_main
from cmk.special_agents.utils.argument_parsing import (
    Args, create_default_argument_parser)
from cmk.utils import paths, store
from redfish.rest.v1 import RetriesExhaustedError, ServerDownOrUnreachableError

cmk.utils.password_store.replace_passwords()

LOGGER = logging.getLogger("agent_redfish")


def parse_arguments(argv: Sequence[str] | None) -> Args:
    """Parse arguments needed to construct an URL and for connection conditions"""
    sections = [
        "Power",
        "Thermal",
        "Memory",
        "NetworkAdapters",
        "NetworkInterfaces",
        "Processors",
        "Storage",
        "EthernetInterfaces",
        "FirmwareInventory",
        "SmartStorage",
        "ArrayControllers",
        "HostBusAdapters",
        "LogicalDrives",
        "PhysicalDrives",
        "SimpleStorage",
        "Drives",
        "Volumes",
    ]

    parser = create_default_argument_parser(description=__doc__)
    # required
    parser.add_argument(
        "-u", "--user", default=None, help="Username for Redfish Login", required=True
    )
    parser.add_argument(
        "-s",
        "--password",
        default=None,
        help="""Password for Redfish Login""",
        required=True,
    )
    # optional
    parser.add_argument(
        "-P",
        "--proto",
        default="https",
        help="""Use 'http' or 'https' (default=https)""",
    )
    parser.add_argument(
        "-p",
        "--port",
        default=443,
        type=int,
        help="Use alternative port (default: 443)",
    )
    parser.add_argument(
        "-m",
        "--sections",
        default=",".join(sections),
        help=f"Comma separated list of data to query. \
               Possible values: {','.join(sections)} (default: all)",
    )
    parser.add_argument(
        "--verify_ssl",
        action="store_true",
        default=False,
    )
    parser.add_argument(
        "--timeout",
        default=3,
        type=int,
        help="""Timeout in seconds for a connection attempt""",
    )
    parser.add_argument(
        "--retries",
        default=2,
        type=int,
        help="""Number auf connection retries before failing""",
    )
    # required
    parser.add_argument(
        "host",
        metavar="HOSTNAME",
        help="""IP address or hostname of your Netapp E-Series Controller""",
    )

    return parser.parse_args(argv)


def dropnonascii(input_str):
    """Drop all non ASCII characters from string"""
    output_str = ""
    for i in input_str:
        num = ord(i)
        if num >= 0:
            if num <= 127:
                output_str = output_str + i

    return output_str


def fetch_data(redfishobj, url, component):
    """fetch a single data object from Redfish"""
    response_url = redfishobj.get(url, None)
    if response_url.status == 200:
        return response_url.dict

    sys.stdout.write(f"{component} data could not be fetched\n")
    redfishobj.logout()
    sys.exit(1)


def fetch_collection(redfishobj, data, component):
    """fetch a whole collection from Redfish data"""
    member_list = data.get("Members")
    data_list = []
    for element in member_list:
        if element.get("@odata.id"):
            element_data = fetch_data(redfishobj, element.get("@odata.id"), component)
            data_list.append(element_data)
    return data_list


def fetch_list_of_elements(redfishobj, fetch_elements, sections, data):
    """fetch a list of single elements from Redfish"""
    result_set = {}
    for element in fetch_elements:
        result_list = []
        element_list = []
        if element not in sections:
            continue
        if element not in data.keys():
            continue

        fetch_result = data.get(element)
        if isinstance(fetch_result, dict):
            element_list.append(fetch_result)
        else:
            element_list = fetch_result
        for entry in element_list:
            result = fetch_data(redfishobj, entry.get("@odata.id"), element)
            # debug output of fetching element
            # sys.stdout.write(f'Fetching {entry.get("@odata.id")}')
            if "Collection" in result.get("@odata.type"):
                result_list.extend(fetch_collection(redfishobj, result, element))
            else:
                result_list.append(result)
        result_set[element] = result_list
    return result_set


def fetch_sections(redfishobj, fetching_sections, sections, data):
    """fetch a single section of Redfish data"""
    result_set = {}
    for section in fetching_sections:
        if section not in sections:
            continue
        if section not in data.keys():
            continue
        section_data = fetch_data(
            redfishobj, data.get(section).get("@odata.id"), section
        )
        if "Collection" in section_data.get("@odata.type"):
            if section_data.get("Members@odata.count", 0) != 0:
                result = fetch_collection(redfishobj, section_data, section)
                result_set[section] = result
        else:
            result_set[section] = section_data
    return result_set


def fetch_hpe_smartstorage(redfishobj, link_list, sections):
    """fetch hpe smartstorage sections"""
    storage_link = link_list.get("SmartStorage", None)
    if storage_link:
        result = fetch_data(redfishobj, storage_link.get("@odata.id"), "SmartStorage")
        storage_links = result.get("Links")
        storage_sections = [
            "ArrayControllers",
            "HostBusAdapters",
        ]
        controller_sections = [
            "LogicalDrives",
            "PhysicalDrives",
        ]
        resulting_sections = list(set(storage_sections).intersection(sections))
        cntrl_result = fetch_sections(
            redfishobj, resulting_sections, sections, storage_links
        )
        process_result(cntrl_result)
        for element in cntrl_result.get("ArrayControllers", []):
            contrl_links = element.get("Links", {})
            resulting_sections = list(set(controller_sections).intersection(sections))
            result = fetch_sections(
                redfishobj, resulting_sections, sections, contrl_links
            )
            process_result(result)


def fetch_extra_data(redfishobj, data_model, extra_links, sections, data):
    """fetch manufacturer specific data"""
    link_list = {}
    link_data = data.get("Oem", {}).get(data_model, {}).get("Links", {})
    if link_data:
        for entry in link_data:
            if entry in extra_links:
                link_list.setdefault(entry, link_data.get(entry))
        if "SmartStorage" in link_list:
            fetch_hpe_smartstorage(redfishobj, link_list, sections)
            link_list.pop("SmartStorage")
        result = fetch_sections(redfishobj, extra_links, sections, link_list)
        process_result(result)


def process_result(result):
    """process and output a fetched result set"""
    for element in list(result.keys()):
        sys.stdout.write(f"<<<redfish_{element.lower()}:sep(0)>>>\n")
        if isinstance(result.get(element), list):
            for entry in result.get(element):
                sys.stdout.write(f"{entry}\n")
        else:
            sys.stdout.write(f"{result.get(element)}\n")


def get_information(redfishobj, sections):
    """get a the information from the Redfish management interface"""
    sections = sections.split(",")
    base_data = fetch_data(redfishobj, "/redfish/v1", "Base")

    manager_url = base_data.get("Managers").get("@odata.id")
    chassis_url = base_data.get("Chassis").get("@odata.id")
    systems_url = base_data.get("Systems").get("@odata.id")

    # fetch managers
    manager_col = fetch_data(redfishobj, manager_url, "Manager")
    manager_data = fetch_collection(redfishobj, manager_col, "Manager")
    sys.stdout.write("<<<check_mk>>>\n")
    sys.stdout.write("Version: 2.0\n")

    manager_os = []
    data_model = ""
    for element in manager_data:
        data_model = list(element.get("Oem", {"Unknown": "Unknown model"}).keys())[0]
        manager_os.append(element.get("FirmwareVersion"))
    sys.stdout.write(f"AgentOS: {' '.join(manager_os)}\n")

    data_model_links = {
        "Hpe": ["SmartStorage", "NetworkAdapters"],
        "Hp": ["Memory", "NetworkAdapters", "SmartStorage", "FirmwareInventory"],
    }

    extra_links = list(set(data_model_links.get(data_model, [])).intersection(sections))
    # fetch systems
    systems_col = fetch_data(redfishobj, systems_url, "System")
    systems_data = fetch_collection(redfishobj, systems_col, "System")
    # manufacturer = systems_data[0].get("Manufacturer")

    sys.stdout.write("<<<redfish_manager:sep(0)>>>\n")
    sys.stdout.write(f"{manager_data}\n")

    sys.stdout.write("<<<redfish_system:sep(0)>>>\n")
    sys.stdout.write(f"{systems_data}\n")

    systems_sections = [
        "EthernetInterfaces",
        "NetworkInterfaces",
        "Processors",
        "Storage",
        "Memory",
    ]
    systems_sub_sections = [
        "Drives",
        "Volumes",
    ]
    if data_model in ["Hpe", "Hp"]:
        systems_sections.remove("Storage")

    resulting_sections = list(set(systems_sections).intersection(sections))
    for system in systems_data:
        result = fetch_sections(redfishobj, resulting_sections, sections, system)
        process_result(result)
        if "Storage" in result:
            storage_data = result.get("Storage")
            if isinstance(storage_data, list):
                for entry in storage_data:
                    if entry.get("Drives@odata.count", 0) != 0:
                        result = fetch_list_of_elements(
                            redfishobj, systems_sub_sections, sections, entry
                        )
                        process_result(result)
            else:
                result = fetch_list_of_elements(
                    redfishobj, systems_sub_sections, sections, storage_data
                )
                process_result(result)

        if extra_links:
            fetch_extra_data(redfishobj, data_model, extra_links, sections, system)

    # fetch chassis
    chassis_col = fetch_data(redfishobj, chassis_url, "Chassis")
    chassis_data = fetch_collection(redfishobj, chassis_col, "Chassis")
    sys.stdout.write("<<<redfish_chassis:sep(0)>>>\n")
    sys.stdout.write(f"{chassis_data}\n")
    chassis_sections = [
        "NetworkAdapters",
        "Power",
        "Thermal",
        "Sensors",
    ]
    resulting_sections = list(set(chassis_sections).intersection(sections))
    for chassis in chassis_data:
        result = fetch_sections(redfishobj, resulting_sections, sections, chassis)
        process_result(result)

    return 0


def store_session_key(redfishobj, host):
    """save session data to file"""
    store_data = {}
    store_path = paths.tmp_dir / "agents" / "agent_redfish" / f"{host}.json"
    store_data.setdefault("location", redfishobj.get_session_location())
    store_data.setdefault("session", redfishobj.get_session_key())
    store.save_text_to_file(store_path, json.dumps(store_data))


def load_session_key(host):
    """load existing redfish session data"""
    store_path = paths.tmp_dir / "agents" / "agent_redfish" / f"{host}.json"
    data = json.loads(store.load_text_from_file(store_path, default="{}"))
    if data.get("session") and data.get("location"):
        return data
    return None


def get_session(args: Args):
    """create a Redfish session with given arguments"""
    try:
        redfish_host = f"{args.proto}://{args.host}:{args.port}"
        # Create a Redfish client object
        REDFISHOBJ = redfish.redfish_client(
            base_url=redfish_host,
            username=args.user,
            password=args.password,
            cafile="",
            default_prefix="/redfish/v1",
            timeout=args.timeout,
            max_retry=args.retries,
        )
        existing_session = load_session_key(args.host)
        # existing session with key found return this session instead of login
        if existing_session:
            REDFISHOBJ.set_session_location(existing_session.get("location"))
            REDFISHOBJ.set_session_key(existing_session.get("session"))
            response_url = REDFISHOBJ.get("/redfish/v1/SessionService/Sessions", None)
            if response_url.status == 200:
                return REDFISHOBJ
            response_url = REDFISHOBJ.get("/redfish/v1/Sessions", None)
            if response_url.status == 200:
                return REDFISHOBJ

        # Login with the Redfish client
        # cleanup old session information
        REDFISHOBJ.set_session_location(None)
        REDFISHOBJ.set_session_key(None)
        REDFISHOBJ.login(auth="session")
    except ServerDownOrUnreachableError as excp:
        sys.stderr.write(
            f"ERROR: server not reachable or does not support RedFish. Error Message: {excp}\n"
        )
        sys.exit()
    except RetriesExhaustedError as excp:
        sys.stderr.write(f"ERROR: too many retries for connection attempt: {excp}\n")
        sys.exit()
    store_session_key(REDFISHOBJ, args.host)
    return REDFISHOBJ


def agent_redfish_main(args: Args) -> int:
    """main function for the special agent"""

    if not args.verify_ssl:
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Start Redfish Session Object
    REDFISHOBJ = get_session(args)
    get_information(REDFISHOBJ, args.sections)
    # logout not needed anymore if no problem - session saved to file
    # logout is done if some query fails
    # REDFISHOBJ.logout()

    return 0


def main() -> int:
    """Main entry point to be used"""
    return special_agent_main(parse_arguments, agent_redfish_main)


if __name__ == "__main__":
    sys.exit(main())
