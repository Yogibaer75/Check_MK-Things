#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#

def inventory_dell_powervault_me4_ports(parsed):
    for i in parsed:
        yield (i, {"state": parsed[i]["health-numeric"]} )

@get_parsed_item_data
def check_dell_powervault_me4_ports(item, params, data):
    port_states = {
        0: ("OK", 0),
        1: ("Degraded", 1),
        2: ("Fault", 2),
        3: ("Unknown", 3),
        4: ("Disconnected", 0),
    }

    if params:
        inv_state_text, inv_state_num = port_states.get(params["state"], ("Unknown", 3))
    else:
        inv_state_num = False
        inv_state_text = ""

    state_text, status_num  = port_states.get(data.get("health-numeric", 3), ("Unknown",3))

    if data.get("status") == "Disconnected":
        message = "is not connected(!)"
    else:
        message = "with %s has state %s - health state is %s" % (data.get("actual-speed"), data.get("status"), state_text)

    if (int(data.get("health-numeric", 3)) != int(params["state"])) and params:
        message += " - state changed since inventory from %s to %s(!)" % (inv_state_text, state_text)
        status_num = max(status_num, 1)

    return status_num, message


check_info["dell_powervault_me4_ports"] = {
    "check_function": check_dell_powervault_me4_ports,
    "parse_function": parse_dell_powervault_me4,
    "inventory_function": inventory_dell_powervault_me4_ports,
    "service_description": "Port %s",
    "has_perfdata": True,  # optional if available
    "includes": ["dell_powervault_me4.include"],
}
