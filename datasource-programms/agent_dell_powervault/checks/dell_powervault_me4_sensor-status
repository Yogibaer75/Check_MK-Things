#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#

@get_parsed_item_data
def check_dell_powervault_me4_sensor_status(item, params, data):
    sensor_states = {
        0: ("Unsupported", 3),
        1: ("OK", 0),
        2: ("Critical", 2),
        3: ("Warning", 1),
        4: ("Unrecoverable", 2),
        5: ("Not Installed", 1),
        6: ("Unknown", 3),
        7: ("Unavailable", 3),
    }

    sensor_unit = {
        "Temperature": ("", "temp"),
        "Voltage": ("V", "voltage"),
        "Charge Capacity": ("", "battery_capacity"),
        "Current": ("A", "current"),
        "Unknown": ("", ""),
    }
    value = data.get("value")
    value_number = ''.join(c for c in value if (c.isdigit() or c == "."))
    status = data.get("status", "Status Missing")
    status_unit, perf_unit = sensor_unit.get(data.get("sensor-type", "Unknown"), ("", "count"))
    state_text, status_num = sensor_states.get(data.get("status-numeric", 7), ("Unknown", 3))
    message = "Sensor state is %s with %s%s" % (state_text, value, status_unit)
    perfdata = [(perf_unit,value_number)]
    return status_num, message, perfdata


check_info["dell_powervault_me4_sensor-status"] = {
    "check_function": check_dell_powervault_me4_sensor_status,
    "parse_function": parse_dell_powervault_me4,
    "inventory_function": discover(),
    "service_description": "Sensor %s",
    "has_perfdata": True,  # optional if available
    "includes": ["dell_powervault_me4.include"],
}

