#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Andreas Doehler <andreas.doehler@bechtle.com/andreas.doehler@gmail.com>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import argparse
import sys
import urllib3
import logging
import cmk.utils.password_store
import redfish
from redfish.rest.v1 import ServerDownOrUnreachableError
from typing import List, Any

cmk.utils.password_store.replace_passwords()

LOGGER = logging.getLogger("agent_redfish")


def parse_arguments(argv: List[str]) -> argparse.Namespace:
    sections = [
        "Power",
        "Thermal",
        "Memory",
        "NetworkAdapters",
        "NetworkInterfaces",
        "Processors",
        "Storage",
        "EthernetInterfaces",
        "FirmwareInventory",
        "SmartStorage",
        "ArrayControllers",
        "HostBusAdapters",
        "LogicalDrives",
        "PhysicalDrives",
    ]

    parser = argparse.ArgumentParser(description=__doc__)
    # required
    parser.add_argument(
        "-u", "--user", default=None, help="Username for Redfish Login", required=True
    )
    parser.add_argument(
        "-s",
        "--password",
        default=None,
        help="""Password for Redfish Login""",
        required=True,
    )
    # optional
    parser.add_argument(
        "-P",
        "--proto",
        default="https",
        help="""Use 'http' or 'https' (default=https)""",
    )
    parser.add_argument(
        "-p",
        "--port",
        default=443,
        type=int,
        help="Use alternative port (default: 443)",
    )
    parser.add_argument(
        "-m",
        "--sections",
        default=sections,
        help="Comma separated list of data to query. Possible values: %s (default: all)"
        % ",".join(sections),
    )
    parser.add_argument(
        "--verify_ssl",
        action="store_true",
        default=False,
    )
    # debugging
    parser.add_argument("-v", "--verbose", action="count", default=0)
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Debug mode: let Python exceptions come through",
    )
    # required
    parser.add_argument(
        "host",
        metavar="HOSTNAME",
        help="""IP address or hostname of your Netapp E-Series Controller""",
    )

    return parser.parse_args(argv)


def dropnonascii(input_str):
    output_str = ""
    for i in input_str:
        num = ord(i)
        if num >= 0:
            if num <= 127:
                output_str = output_str + i

    return output_str


def fetch_data(redfishobj, url, component):
    response_url = redfishobj.get(url, None)
    if response_url.status == 200:
        return response_url.dict
    else:
        sys.stdout.write("%s data could not be fetched\n" % component)
        redfishobj.logout()
        sys.exit(1)


def fetch_collection(redfishobj, data, component):
    member_list = data.get("Members")
    data_list = []
    for element in member_list:
        if element.get("@odata.id"):
            element_data = fetch_data(redfishobj, element.get("@odata.id"), component)
            data_list.append(element_data)
    if len(data_list) == 1:
        return data_list[0]
    return data_list


def fetch_sections(redfishobj, fetch_sections, sections, data):
    result_set = {}
    for section in fetch_sections:
        if section not in sections:
            continue
        if section not in data.keys():
            continue
        section_data = fetch_data(
            redfishobj, data.get(section).get("@odata.id"), section
        )
        if "Collection" in section_data.get("@odata.type"):
            if section_data.get("Members@odata.count", 0) != 0:
                result = fetch_collection(redfishobj, section_data, section)
                result_set[section] = result
        else:
            result_set[section] = section_data
    return result_set


def process_result(result):
    for element in list(result.keys()):
        sys.stdout.write("<<<redfish_%s:sep(0)>>>\n" % element.lower())
        if isinstance(result.get(element), list):
            for entry in result.get(element):
                sys.stdout.write("%s\n" % entry)
        else:
            sys.stdout.write("%s\n" % result.get(element))


def get_information(redfishobj, sections):
    sections = sections.split(',')
    base_data = fetch_data(redfishobj, "/redfish/v1", "Base")

    manager_url = base_data.get("Managers").get("@odata.id")
    chassis_url = base_data.get("Chassis").get("@odata.id")
    systems_url = base_data.get("Systems").get("@odata.id")

    # fetch managers
    manager_col = fetch_data(redfishobj, manager_url, "Manager")
    manager_data = fetch_collection(redfishobj, manager_col, "Manager")

    sys.stdout.write("<<<check_mk>>>\n")
    sys.stdout.write("Version: 2.0\n")
    manager_os = []
    if isinstance(manager_data, dict):
        manager_os.append(manager_data.get("FirmwareVersion"))
    else:
        for element in manager_data:
            manager_os.append(element.get("FirmwareVersion"))
    sys.stdout.write("AgentOS: %s\n" % " ".join(manager_os))

    # fetch systems
    systems_col = fetch_data(redfishobj, systems_url, "System")
    systems_data = fetch_collection(redfishobj, systems_col, "System")

    manufacturer = systems_data.get("Manufacturer")

    sys.stdout.write("<<<redfish_system:sep(0)>>>\n")
    sys.stdout.write("%s\n" % systems_data)

    extra_links = False
    storage_links = False

    if manufacturer == "HPE":
        if isinstance(systems_data, dict):
            oem_name = list(systems_data.get("Oem"))[0]
            extra_links = systems_data.get("Oem").get(oem_name).get("Links")

    systems_sections = [
        "NetworkInterfaces",
        "Processors",
        "Storage",
        "Memory",
    ]
    print(systems_sections)
    print(sections)
    resulting_sections = list(set(systems_sections).intersection(sections))
    print(resulting_sections)
    if isinstance(systems_data, list):
        for system in systems_data:
            result = fetch_sections(redfishobj, resulting_sections, sections, system)
            process_result(result)
    else:
        result = fetch_sections(redfishobj, resulting_sections, sections, systems_data)
        process_result(result)

    # fetch chassis
    chassis_col = fetch_data(redfishobj, chassis_url, "Chassis")
    chassis_data = fetch_collection(redfishobj, chassis_col, "Chassis")
    chassis_sections = [
        "NetworkAdapters",
        "Power",
        "Thermal",
    ]

    if isinstance(chassis_data, list):
        for chassis in chassis_data:
            result = fetch_sections(redfishobj, chassis_sections, sections, chassis)
            process_result(result)
    else:
        result = fetch_sections(redfishobj, chassis_sections, sections, chassis_data)
        process_result(result)

    if extra_links:
        extra_sections = [
            "EthernetInterfaces",
            "FirmwareInventory",
            "Memory",
            "NetworkAdapters",
            "SmartStorage",
        ]
        result = fetch_sections(redfishobj, extra_sections, sections, extra_links)
        if "SmartStorage" in result:
            storage_links = result.get("SmartStorage").get("Links")
            result.pop("SmartStorage")
        process_result(result)

    if storage_links:
        storage_sections = [
            "ArrayControllers",
            "HostBusAdapters",
        ]
        cntrl_result = fetch_sections(
            redfishobj, storage_sections, sections, storage_links
        )
        process_result(cntrl_result)
        controller_sections = [
            "LogicalDrives",
            "PhysicalDrives",
        ]
        for element in list(cntrl_result.keys()):
            if isinstance(cntrl_result.get(element), list):
                for entry in cntrl_result.get(element):
                    result = fetch_sections(
                        redfishobj, controller_sections, sections, entry.get("Links")
                    )
                    process_result(result)
            else:
                data = cntrl_result.get(element)
                result = fetch_sections(
                    redfishobj, controller_sections, sections, data.get("Links")
                )
                process_result(result)

    redfishobj.logout()
    sys.exit(0)


def get_session(args):
    try:
        redfish_host = f"{args.proto}://{args.host}:{args.port}"
        # Create a Redfish client object
        REDFISHOBJ = redfish.redfish_client(
            base_url=redfish_host,
            username=args.user,
            password=args.password,
            cafile="",
            default_prefix="/redfish/v1",
        )
        # Login with the Redfish client
        REDFISHOBJ.login(auth="session")
    except ServerDownOrUnreachableError as excp:
        sys.stderr.write(
            "ERROR: server not reachable or does not support RedFish. Error Message: %s\n"
            % excp
        )
        sys.exit()
    return REDFISHOBJ


def main(argv: Any = None) -> int:
    args = None

    if argv is None:
        argv = sys.argv[1:]
        args = parse_arguments(argv)

    if not args.verify_ssl:
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    logging.basicConfig(
        format="%(levelname)s %(asctime)s %(name)s: %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
        level={0: logging.WARN, 1: logging.INFO, 2: logging.DEBUG}.get(
            args.verbose, logging.DEBUG
        ),
    )

    LOGGER.debug("Calling special agent redfish with parameters: %s", argv.__repr__())

    # Start Redfish Session Object
    REDFISHOBJ = get_session(args)

    get_information(REDFISHOBJ, args.sections)
    REDFISHOBJ.logout()


if __name__ == "__main__":
    main()
