#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Andreas Doehler <andreas.doehler@bechtle.com/andreas.doehler@gmail.com>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import getopt
import sys
import cmk.utils.password_store
import redfish
from redfish.rest.v1 import ServerDownOrUnreachableError

cmk.utils.password_store.replace_passwords()


def usage():
    sys.stderr.write("""Check_MK Dell iDRAC Agent

USAGE: agent_dell_idrac [OPTIONS] HOST
       agent_dell_idrac -h

ARGUMENTS:
  HOST                              Host name or IP address of the target iLO 4

OPTIONS:
  -h, --help                        Show this help message and exit
  -u USER, --user USER              Username for Dell iDRAC login
  -p PASSWORD, --password PASSWORD  Password for Dell iDRAC login
  --verify-certs yes/no             SSL verification on or off
""")


def dropnonascii(input_str):
    output_str = ""
    for i in input_str:
        num = ord(i)
        if (num >= 0):
            if (num <= 127):
                output_str = output_str + i

    return output_str


def get_information(redfishobj):
    response_base_url = redfishobj.get("/redfish/v1", None)
    if response_base_url.status == 200:
        chassis_url = response_base_url.dict["Chassis"]["@odata.id"]
    else:
        sys.stdout.write("Base URL for chassis cannot be fetched\n")
        redfishobj.logout()
        sys.exit(1)

    sys.stdout.write('<<<check_mk>>>\n')
    sys.stdout.write('Version: 9\n')
    sys.stdout.write('AgentOS: iDRAC ...\n')

    # fetch chassis
    response_chassis_url = redfishobj.get(chassis_url, None)
    if response_chassis_url.status == 200:
        chassis = response_chassis_url.dict["Members"]
    else:
        sys.stdout.write("Chassis data could not be fetched\n")
        redfishobj.logout()
        sys.exit(1)

    for element in chassis:
        sys.stdout.write("<<<dell_idrac_rf_system:sep(0)>>>\n")
        element_dict = {}
        element_url = element['@odata.id']
        element_data = redfishobj.get(element_url, None)
        if element_data.status != 200:
            sys.stdout.write('Problem fetching element data\n')
            continue
        else:
            element_dict = element_data.dict
            if element_dict.get("ChassisType") == "StorageEnclosure":
                continue
            print(element_dict)

        if "Power" in element_dict:
            power_url = element_dict["Power"].get("@odata.id", None)
            if power_url:
                power_response = redfishobj.get(power_url, None)
            sys.stdout.write("<<<dell_idrac_rf_power:sep(0)>>>\n")
            print(power_response.dict)
        if "Thermal" in element_dict:
            thermal_url = element_dict["Thermal"].get("@odata.id", None)
            if thermal_url:
                thermal_response = redfishobj.get(thermal_url, None)
            sys.stdout.write("<<<dell_idrac_rf_thermal:sep(0)>>>\n")
            print(thermal_response.dict)
        if "Memory" in element_dict:
            memory_url = element_dict["Memory"].get("@odata.id", None)
            if memory_url:
                memory_response = redfishobj.get(memory_url, None)
            memory_dict = memory_response.dict
            sys.stdout.write("<<<dell_idrac_rf_memory:sep(0)>>>\n")
            for mem_dev in memory_dict.get("Members"):
                mem_dev_response = redfishobj.get(
                    mem_dev.get("@odata.id", None), None)
                print(mem_dev_response.dict)
        if "NetworkAdapters" in element_dict:
            network_url = element_dict["NetworkAdapters"].get(
                "@odata.id", None)
            if network_url:
                network_response = redfishobj.get(network_url, None)
            network_dict = network_response.dict
            for network_dev in network_dict.get("Members"):
                sys.stdout.write("<<<dell_idrac_rf_network:sep(0)>>>\n")
                network_dev_response = redfishobj.get(
                    network_dev.get("@odata.id", None), None)
                network_dev_dict = network_dev_response.dict
                print(network_dev_dict)
                if "NetworkPorts" in network_dev_dict.keys():
                    ports = redfishobj.get(
                        network_dev_dict["NetworkPorts"].get(
                            "@odata.id", None), None)
                    ports_dict = ports.dict
                    for port in ports_dict["Members"]:
                        port_response = redfishobj.get(
                            port.get("@odata.id", None), None)
                        sys.stdout.write("<<<dell_idrac_rf_interface:sep(0)>>>\n")
                        print(port_response.dict)
        links = element_dict.get("Links")
        for element in links.keys():
            if element == "Drives" and links.get("Drives@odata.count", 0) != 0:
                sys.stdout.write("<<<dell_idrac_rf_drives:sep(0)>>>\n")
                for drive in links.get("Drives"):
                    drive_url = drive.get("@odata.id", None)
                    if drive_url:
                        drive_response = redfishobj.get(drive_url, None)
                    print(drive_response.dict)
            if element == "Processors" and links.get("Processors@odata.count", 0) != 0:
                sys.stdout.write("<<<dell_idrac_rf_cpu:sep(0)>>>\n")
                for cpu in links.get("Processors"):
                    cpu_url = cpu.get("@odata.id", None)
                    if cpu_url:
                        cpu_response = redfishobj.get(cpu_url, None)
                    print(cpu_response.dict)
            if element == "Storage" and links.get("Storage@odata.count", 0) != 0:
                for storage in links.get("Storage"):
                    storage_url = storage.get("@odata.id", None)
                    if storage_url:
                        storage_response = redfishobj.get(storage_url, None)
                    storage_dict = storage_response.dict
                    sys.stdout.write("<<<dell_idrac_rf_storage:sep(0)>>>\n")
                    print(storage_dict)
                    if "Drives" in storage_dict.keys() and storage_dict.get("Drives@odata.count", 0) != 0:
                        sys.stdout.write("<<<dell_idrac_rf_drives:sep(0)>>>\n")
                        for drive in storage_dict.get("Drives"):
                            drive_url = drive.get("@odata.id", None)
                            if drive_url:
                                drive_response = redfishobj.get(drive_url, None)
                            print(drive_response.dict)
                    if "Volumes" in storage_dict.keys():
                        sys.stdout.write("<<<dell_idrac_rf_volumes:sep(0)>>>\n")
                        volume_url = storage_dict["Volumes"].get("@odata.id", None)
                        if volume_url:
                            volume_response = redfishobj.get(volume_url, None)
                            volume_dict = volume_response.dict
                            members = volume_dict.get("Members", None)
                            if members:
                                for member in members:
                                    member_response = redfishobj.get(
                                        member.get("@odata.id", None), None)
                                    print(member_response.dict)


#############################################################################
# command line options
#############################################################################
short_options = 'h:u:p:t:'
long_options = ['help', 'user=', 'password=', 'timeout=', 'verify-certs=']

try:
    opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)
except getopt.GetoptError as err:
    sys.stderr.write("%s\n" % err)
    sys.exit(1)

opt_timeout = 60

host_address = None
user = None
password = None

for o, a in opts:
    if o in ['-u', '--user']:
        user = a
    elif o in ['-p', '--password']:
        password = a
    elif o in ['-t', '--timeout']:
        opt_timeout = int(a)
    elif o in ['--verify-certs']:
        opt_verify = a
    elif o in ['-h', '--help']:
        usage()
        sys.exit(0)

if len(args) == 1:
    host_address = args[0]
elif not args:
    sys.stderr.write("ERROR: No host given.\n")
    sys.exit(1)
else:
    sys.stderr.write("ERROR: Please specify exactly one host.\n")
    sys.exit(1)

if (user is None or user == '') or (password is None or password == ''):
    sys.stderr.write("ERROR: Please specify user and password.\n")
    sys.exit(1)

if __name__ == "__main__":
    idrac_host = "https://%s" % host_address
    idrac_account = user
    idrac_password = password
    DISABLE_RESOURCE_DIR = False

    try:
        # Create a Redfish client object
        REDFISHOBJ = redfish.redfish_client(
            base_url=idrac_host,
            username=idrac_account,
            password=idrac_password,
            cafile="",
            default_prefix="/redfish/v1",
        )
        # Login with the Redfish client
        REDFISHOBJ.login(auth="session")
    except ServerDownOrUnreachableError as excp:
        sys.stderr.write(
            "ERROR: server not reachable or does not support RedFish. Error Message: %s\n"
            % excp)
        sys.exit()

    get_information(REDFISHOBJ)
    REDFISHOBJ.logout()
