#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Example output from agent
# <<<windows_dedup:sep(58)>>>
# Volume          : I:
# Enabled         : True
# Capacity        : 24999861673943	capacity
# FreeSpace       : 19474521546752	Compute from capacity - real_capacity
# UsedSpace       : 5525340127232	real_capacity
# UnoptimizedSize : 23045933661347	virtual_capacity
# SavedSpace      : 17520593534115
# SavingsRate     : 76
from cmk.base.check_legacy_includes.df import *
from cmk.base.check_legacy_includes.size_trend import *


def parse_windows_dedup(info):
    data = {}
    last_volume = False
    for line in info:
        name = line[0].strip()
        value = ":".join(line[1:]).strip()
        if last_volume and name != "Volume":
            data[last_volume][name] = value
        if name == "Volume":
            last_volume = value
            data[last_volume] = {}
    return data


def inventory_windows_dedup(parsed):
    return [(n, None) for n, v in parsed.items() if v.get("Enabled") == "True"]


def check_windows_dedup(item, params, parsed):
    state = 0
    infotext = ""
    perfdata = []
    for name, values in parsed.items():
        if name == item:
            capacity = saveint(values["Capacity"])
            real_capacity = saveint(values["UsedSpace"])
            virtual_capacity = saveint(values["UnoptimizedSize"])
            avail_capacity = capacity - real_capacity
            provisioning = 100.0 * virtual_capacity / capacity
            dedup_savings = float(values["SavingsRate"])
            mb = 1024 * 1024
            state, infotext, perfdata = df_check_filesystem_single(
                item,
                capacity / mb,
                avail_capacity / mb,
                0,
                None,
                None,
                params,
            )

            infotext += (
                ", raw data space: %s ,provisioned space %.1f%%, dedup savings %.1f%%"
                % (
                    get_bytes_human_readable(virtual_capacity),
                    provisioning,
                    dedup_savings,
                )
            )

            perfdata += [
                ("uncommitted", virtual_capacity),
                ("provisining", provisioning),
                ("savings", dedup_savings, None, None, 0, 100),
            ]

    return state, infotext, perfdata


check_info["windows_dedup"] = {
    "check_function": check_windows_dedup,
    "inventory_function": inventory_windows_dedup,
    "service_description": "Dedup Volume %s",
    "parse_function": parse_windows_dedup,
    "has_perfdata": True,
    "group": "filesystem",
    "default_levels_variable": "filesystem_default_levels",
}
