#!/usr/bin/python
# # -*- encoding: utf-8; py-indent-offset: 4 -*-

factory_settings["hyperv_cluster_roles_default_levels"] = {
    "states" : {
        "active": 0,
        "inactive": 1,
        "Online": 0,
        "Offline": 1,
    }
}


def inventory_hyperv_cluster_roles(parsed):
    for vm in parsed.keys():
        yield vm, {}


def check_hyperv_cluster_roles(item, params, parsed):
    vm = parsed.get(item, "")

    translate_state = {
            "active": "Online",
            "inactive": "Offline",
            }

    if not vm:
        yield 3, "VM not found in agent output"
        return

    state = 0
    wanted_result = None
    wanted_states = params.get("match_services")
    for ressource, wanted_state in wanted_states:
        if ressource == item:
            wanted_result = translate_state.get(wanted_state)

    vm_state = vm.get("cluster.vm.state")
    if wanted_result:
        if wanted_result == vm_state:
            yield state, "power state: %s" % vm.get("cluster.vm.state")
        else:
            state = 1
            yield state, "power state: %s - wanted state: %s" % (vm.get("cluster.vm.state"), wanted_state)
    else:
        state = params.get("states", {}).get(vm.get("cluster.vm.state"),3)
        yield state, "power state: %s" % vm.get("cluster.vm.state")

    if vm.get("cluster.vm.owner"):
        if vm.get("cluster.vm.state") == "Online":
            yield 0, 'running on [%s]' % vm.get("cluster.vm.owner")
        else:
            yield 0, 'defined on [%s]' % vm.get("cluster.vm.owner")


check_info['hyperv_cluster_roles'] = {
    "inventory_function": inventory_hyperv_cluster_roles,
    "check_function": check_hyperv_cluster_roles,
    "parse_function": parse_hyperv,
    "default_levels_variable": "hyperv_cluster_roles_default_levels",
    "service_description": "HyperV VM %s",
    "includes": ["hyperv.include"],
    "group": "hyperv_cluster_roles",
}
