#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import urllib3
import logging
import argparse
import sys
import json

LOGGER = logging.getLogger("agent_dell_sc")

# ARGPARSE


def parse_arguments(argv):

    parser = argparse.ArgumentParser(description=__doc__)
    # required
    parser.add_argument("-u",
                        "--user",
                        default=None,
                        help="Username for Dell SC Login",
                        required=True)
    parser.add_argument(
        "-s",
        "--password",
        default='geheim',
        help="""Password for Dell SC Login""",
    )
    # optional
    parser.add_argument(
        "-P",
        "--proto",
        default="https",
        help="""Use 'http' or 'https' (default=https)""",
    )
    parser.add_argument(
        "-p",
        "--port",
        default=3033,
        type=int,
        help="Use alternative port (default: 3033)",
    )
    parser.add_argument(
        "--verify_ssl",
        action="store_true",
        default=False,
    )
    # maintenance
    parser.add_argument("-v", "--verbose", action="count", default=0)
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Debug mode: let Python exceptions come through",
    )
    #
    parser.add_argument(
        "host",
        metavar="HOSTNAME",
        help="""IP address or hostname of your Netapp E-Series Controller""",
    )

    return parser.parse_args(argv)


def get_session(args):
    session = requests.Session()
    session.auth = (args.user, args.password)
    session.verify = args.verify_ssl
    return session


def main(argv=None):
    args = parse_arguments(argv or sys.argv[1:])

    if not args.verify_ssl:
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    logging.basicConfig(
        format="%(levelname)s %(asctime)s %(name)s: %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
        level={
            0: logging.WARN,
            1: logging.INFO,
            2: logging.DEBUG
        }.get(args.verbose, logging.DEBUG),
    )

    LOGGER.debug("Calling special agent DELL SC with parameters: %s",
                 argv.__repr__())

    # Start REST Session Object
    session = get_session(args)

    # Base URL for all requests
    base_url = (f"{args.proto}://{args.host}:{args.port}/api/rest/")

    payload = {}
    try:
        headers = {
            "Content-Type": "application/json; charset=utf-8",
            "Accept": "application/json",
            "x-dell-api-version": "2.0"
        }
        result = session.post(
            f"{base_url}ApiConnection/Login",
            data=json.dumps(payload, ensure_ascii=False).encode('utf-8'),
            headers=headers,
            verify=False,
        )
        r = json.loads(result.content)
        headers.setdefault("sessionKey", str(r.get("sessionKey")))
        result.raise_for_status()

    except requests.exceptions.RequestException as e:
        sys.stderr.write("Error: %s\n" % e)
        if args.debug:
            raise
        sys.exit(1)

    # fetch StorageCenters
    result = session.get(
        f"{base_url}ApiConnection/ApiConnection/0/StorageCenterList",
        headers=headers,
        verify=False,
    )
    r = json.loads(result.content)
    for i in r:
        # fetch Volumes data
        print("<<<<%s>>>>" % i['name'])
        print("<<<dell_sc_volumes:sep(0)>>>")
        result = session.get(
            f"{base_url}StorageCenter/StorageCenter/{i['instanceId']}/VolumeList",
            headers=headers,
            verify=False,
        )
        r = json.loads(result.content)

        print(r)
        for a in r:
            result = session.get(
                f"{base_url}StorageCenter/ScVolume/{a['instanceId']}/StorageUsage",
                headers=headers,
                verify=False,
            )
            s = json.loads(result.content)
            print(s)
        print("<<<<>>>>")

    result = session.post(
        f"{base_url}ApiConnection/Logout",
        data=json.dumps(payload, ensure_ascii=False).encode('utf-8'),
        headers=headers,
        verify=False,
    )
    print(result.text)

    sys.exit(0)


if __name__ == "__main__":
    sys.exit(main())
