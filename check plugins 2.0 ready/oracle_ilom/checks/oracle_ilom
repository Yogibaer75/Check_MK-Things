#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import

oracle_ilom_map_unit = {
    '1': " Other",
    '2': " Unknown",
    '3': "c",
    '4': "f",
    '5': "k",
    '6': "v",
    '7': "a",
    '8': "w",
    '20': "rpm",
    '21': "frequency",
}

oracle_ilom_unit_perf = {
    "w": "power",
    "rpm": "fan",
    "v": "voltage",
}

oracle_ilom_map_type = {
    '1': "other",
    '2': "unknown",
    '3': "temperature",
    '4': "voltage",
    '5': "current",
    '6': "tachometer",
    '7': "counter",
    '8': "switch",
    '9': "lock",
    '10': "humidity",
    '11': "smoke",
    '12': "presence",
    '13': "airflow",
}

oracle_ilom_map_state = {
    '1': (2, "Critical"),
    '2': (2, "Major"),
    '3': (1, "Minor"),
    '4': (3, "indeterminate"),
    '5': (1, "Warning"),
    '6': (1, "Pending"),
    '7': (0, "Cleared"),
}


def parse_oracle_ilom(info):
    parsed = {}
    entities = {}
    sensors, entity, types = info

    for entity_id, entity_state, entity_alarm, entity_name in entity:
        entities[entity_id] = {"name": entity_name, "state": entity_state, "alarm": entity_alarm}

    for type_id, type_entry in types:
        if type_id in entities:
            entities[type_id].update({"type": oracle_ilom_map_type.get(type_entry, "other")})

    for sensor_id, sensor_unit, sensor_exponent, sensor_value_str, \
        sensor_lower_warn_value, sensor_upper_warn_value, \
        sensor_lower_crit_value, sensor_upper_crit_value, \
        sensor_lower_fatal_value, sensor_upper_fatal_value, sensor_bit_mask in sensors:

        sensor_type_readable = \
            oracle_ilom_map_unit.get(sensor_unit, '')

        sensor_name = "Sensor %s %s" % (sensor_id, entities[sensor_id]["name"].strip())

        sensor_unit = oracle_ilom_map_unit.get(sensor_unit, " Other")

        sensor_data = map(lambda x: float(x) * pow(10, int(sensor_exponent)), \
                          [sensor_value_str, sensor_lower_fatal_value, sensor_lower_warn_value, \
                           sensor_upper_fatal_value, sensor_upper_warn_value])

        parsed[sensor_name] = {
            'sensor_type': entities[sensor_id]["type"],
            'sensor_state': entities[sensor_id]["alarm"],
            'availability': entities[sensor_id]["state"],
            'sensor_data': sensor_data,
            'sensor_unit': sensor_unit,
        }

    return parsed


def inventory_oracle_ilom(parsed, sensor_type):
    inventory = []
    for key, values in parsed.items():
        if values['availability'] == '2' and values['sensor_type'] == sensor_type:
            inventory.append((key, {}))

    return inventory


def inventory_oracle_ilom_temp(parsed, sensor_type):
    inventory = []
    for key, values in parsed.items():
        if values['availability'] == '2' and values['sensor_type'] == sensor_type:
            inventory.append((key, {}))

    return inventory


def check_oracle_ilom(item, params, parsed):
    if item in parsed:
        state, state_readable = oracle_ilom_map_state.get(parsed[item]['sensor_state'],
                                                          (3, "unknown"))
        unit = parsed[item]['sensor_unit']
        reading, crit_lower, warn_lower, crit, warn = parsed[item]['sensor_data']
        infotext = "%s%s, status: %s" % (reading, unit, state_readable)

        if state > 0 and reading >= warn:
            infotext += " (device warn/crit at %.1f%s/%.1f%s)" \
                        % (warn, unit, crit, unit)
        elif state > 0 and reading < warn_lower:
            infotext += " (device warn/crit below %.1f%s/%.1f%s)" \
                        % (warn_lower, unit, crit_lower, unit)
        return state, infotext, [(oracle_ilom_unit_perf.get(parsed[item]['sensor_unit'],
                                                            'other'), reading, warn, crit)]


def check_oracle_ilom_temp(item, params, parsed):
    if item in parsed:
        state, state_readable = oracle_ilom_map_state.get(parsed[item]['sensor_state'],
                                                          (3, "unknown"))
        reading, crit_lower, warn_lower, crit, warn = parsed[item]['sensor_data']
        if warn_lower == 0:
            warn_lower = None
        if warn == 0:
            warn = None
        if crit_lower == 0:
            crit_lower = None
        if crit == 0:
            crit = None

        return check_temperature(reading,
                                 params,
                                 "oracle_ilom_%s" % item,
                                 dev_unit=parsed[item]['sensor_unit'],
                                 dev_levels=(warn, crit),
                                 dev_levels_lower=(warn_lower, crit_lower),
                                 dev_status=state,
                                 dev_status_name=state_readable)


#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   +----------------------------------------------------------------------+
#   |                             main check                               |
#   '----------------------------------------------------------------------'

check_info['oracle_ilom'] = {
    'parse_function': parse_oracle_ilom,
    'inventory_function': lambda parsed: inventory_oracle_ilom_temp(parsed, 'temperature'),
    'check_function': check_oracle_ilom_temp,
    'service_description': 'Temperature %s',
    'has_perfdata': True,
    'snmp_info': [
        (".1.3.6.1.4.1.42.2.70.101.1.1.8.1", [
            OID_END,
            "1",
            "2",
            "4",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "15",
        ]),
        (".1.3.6.1.4.1.42.2.70.101.1.1.2.1", [
            OID_END,
            "2",
            "3",
            "5",
        ]),
        (".1.3.6.1.4.1.42.2.70.101.1.1.6.1", [
            OID_END,
            "2",
        ]),
    ],
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.42.2.200",
    'group': "temperature",
}

check_info['oracle_ilom.fan'] = {
    'inventory_function': lambda parsed: inventory_oracle_ilom(parsed, 'tachometer'),
    'check_function': check_oracle_ilom,
    'service_description': 'Fan %s',
    'has_perfdata': True,
}

check_info['oracle_ilom.voltage'] = {
    'inventory_function': lambda parsed: inventory_oracle_ilom(parsed, 'voltage'),
    'check_function': check_oracle_ilom,
    'service_description': 'Voltage %s',
    'has_perfdata': True,
}

check_info['oracle_ilom.other'] = {
    'inventory_function': lambda parsed: inventory_oracle_ilom(parsed, 'other'),
    'check_function': check_oracle_ilom,
    'service_description': 'Other %s',
    'has_perfdata': True,
}
