#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#
# modified by: Andreas Doehler <andreas.doehler@gmail.com>

import urllib2
from httplib import HTTPConnection, HTTPSConnection
import base64
import ssl
import csv
import sys

try:
    import simplejson as json
except ImportError:
    import json

field_separator = "\t"
# set once parameters have been parsed
base_url = None


class HTTPSConfigurableConnection(HTTPSConnection):

    IGNORE = "__ignore"

    def __init__(self, host, ca_file=None):
        HTTPSConnection.__init__(self, host)
        self.__ca_file = ca_file

    def connect(self):
        if not self.__ca_file:
            HTTPSConnection.connect(self)
        else:
            HTTPConnection.connect(self)
            if self.__ca_file == HTTPSConfigurableConnection.IGNORE:
                self.sock = ssl.wrap_socket(self.sock, cert_reqs=ssl.CERT_NONE)
            else:
                self.sock = ssl.wrap_socket(self.sock,
                                            ca_certs=self.__ca_file,
                                            cert_reqs=ssl.CERT_REQUIRED)


class HTTPSAuthHandler(urllib2.HTTPSHandler):
    def __init__(self, ca_file):
        urllib2.HTTPSHandler.__init__(self)
        self.__ca_file = ca_file

    def https_open(self, req):
        return self.do_open(self.get_connection, req)

    def get_connection(self, host, timeout):
        return HTTPSConfigurableConnection(host, ca_file=self.__ca_file)


def gen_headers(username, password):
    auth = base64.encodestring("%s:%s" % (username, password)).strip()

    return {'Authorization': "Basic " + auth}


def gen_csv_writer():
    return csv.writer(sys.stdout, delimiter=field_separator)


def write_title(section, separator):
    sys.stdout.write("<<<prism_%s:sep(%d)>>>\n" % (section, separator))


def send_request(opener, path, headers, parameters=None):
    url = "%s/PrismGateway/services/rest/v1/%s/" % (base_url, path)
    if parameters is not None:
        url = "%s?%s" % (url, "&".join(["%s=%s" % par for par in parameters.iteritems()]))
    req = urllib2.Request(url, headers=headers)
    response = opener.open(req)
    res = response.read()

    return json.loads(res)


def output_containers(opener, headers):
    write_title("containers",9)
    obj = send_request(opener, "containers", headers)

    writer = gen_csv_writer()
    writer.writerow(["name", "usage", "capacity"])

    for entity in obj['entities']:
        writer.writerow([
            entity['name'], entity['usageStats']['storage.user_usage_bytes'],
            entity['usageStats']['storage.user_capacity_bytes']
        ])


def output_alerts(opener, headers):
    write_title("alerts",9)
    obj = send_request(opener,
                       "alerts",
                       headers,
                       parameters={
                           'resolved': "false",
                           'acknowledged': "false"
                       })

    writer = gen_csv_writer()
    writer.writerow(["timestamp", "message", "severity"])

    for entity in obj['entities']:
        context = zip(entity['contextTypes'], entity['contextValues'])
        try:
            message = entity['message'].format(**dict(context))
        except KeyError:
            message = entity['message']
        writer.writerow([entity['createdTimeStampInUsecs'], message, entity['severity']])


def output_cluster(opener, headers):
    write_title("info",9)
    obj = send_request(opener, "cluster", headers)

    writer = gen_csv_writer()
    writer.writerow(["name", "version"])
    writer.writerow([obj['name'], obj['version']])


def output_vms(opener, headers):
    write_title("vms",0)
    obj = send_request(opener, "vms", headers)
    print(obj)
    for element in obj.get("entities"):
        print("<<<<%s>>>>" % element.get("vmName"))
        write_title("vm",0)
        print(element)
        if "nutanixGuestTools" in element:
            write_title("vm_tools",0)
            print(element.get("nutanixGuestTools"))
        if "stats" in element:
            write_title("vm_stats",0)
            print(element.get("stats"))
        print("<<<<>>>>")

def output_hosts(opener, headers):
    write_title("hosts",0)
    obj = send_request(opener, "hosts", headers)
    print(obj)
    for element in obj.get("entities"):
        print("<<<<%s>>>>" % element.get("name"))
        write_title("host",0)
        print(element)
        if "diskHardwareConfigs" in element:
            write_title("hw_disks",0)
            print(element.get("diskHardwareConfigs"))
        if "stats" in element:
            write_title("host_stats",0)
            print(element.get("stats"))
        if "usageStats" in element:
            write_title("host_usage",0)
            print(element.get("usageStats"))
        print("<<<<>>>>")

def output_protection(opener, headers):
    write_title("protection_domains",0)
    obj = send_request(opener, "protection_domains", headers)
    print(obj)

def output_support(opener, headers):
    write_title("remote_support",0)
    obj = send_request(opener, "cluster/remote_support", headers)
    print(obj)

def output_pools(opener, headers):
    write_title("storage_pools",0)
    obj = send_request(opener, "storage_pools", headers)
    print(obj)


def main():
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option("--server", help="host to connect to")
    parser.add_option("--port", default=9440, type="int", help="tcp port")
    parser.add_option("--username", help="user account on prism")
    parser.add_option("--password", help="password for that account")
    options, _args = parser.parse_args()
    settings = vars(options)

    if (settings.get('server') is None or settings.get('username') is None or
            settings.get('password') is None):
        sys.stderr.write(
            'usage: agent_prism --server SERVER --username USER --password PASSWORD [--port PORT]\n'
        )
        sys.exit(1)

    req_headers = gen_headers(settings['username'], settings['password'])

    global base_url
    base_url = "https://%s:%d" % (settings['server'], settings['port'])

    opener = urllib2.build_opener(HTTPSAuthHandler(HTTPSConfigurableConnection.IGNORE))
    output_containers(opener, req_headers)
    output_alerts(opener, req_headers)
    output_cluster(opener, req_headers)
    output_vms(opener, req_headers)
    output_hosts(opener, req_headers)
    output_protection(opener, req_headers)
    output_support(opener, req_headers)
    output_pools(opener, req_headers)


if __name__ == "__main__":
    main()
