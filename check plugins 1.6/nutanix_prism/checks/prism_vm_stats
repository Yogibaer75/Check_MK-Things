#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Andreas Doehler <andreas.doehler@bechtle.com/andreas.doehler@gmail.com>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_prism_vm_stats(info):
    import ast
    parsed = {}
    parsed = ast.literal_eval(info[0][0])
    return parsed

def inventory_prism_vm_stats(parsed):
    if "controller_avg_io_latency_usecs" in parsed:
        return[(None, None)]

def check_prism_vm_stats(_no_item, _no_params, parsed):
    state = 0
    avg_latency = int(parsed.get("controller_avg_io_latency_usecs"))
    avg_read_lat = int(parsed.get("controller_avg_read_io_latency_usecs"))
    avg_write_lat = int(parsed.get("controller_avg_write_io_latency_usecs"))
    avg_read_bytes = int(parsed.get("controller_avg_read_io_size_kbytes"))
    avg_write_bytes = int(parsed.get("controller_avg_write_io_size_kbytes"))
    
    msg_text = "is %s  read and %s write" %(get_bytes_human_readable(avg_read_bytes * 1000), get_bytes_human_readable(avg_write_bytes * 1000))
    perfdata = [("avg_latency", avg_latency),
                ("avg_read_lat", avg_read_lat), 
                ("avg_write_lat", avg_write_lat),
                ("avg_read_bytes", avg_read_bytes),
                ("avg_write_bytes", avg_write_bytes)]
    return state, msg_text, perfdata


check_info["prism_vm_stats"] = {
    "parse_function": parse_prism_vm_stats,
    "check_function": check_prism_vm_stats,
    "inventory_function": inventory_prism_vm_stats,
    "has_perfdata": True,
    "service_description": "NTX I/O",
}


def inventory_prism_vm_stats_cpu(parsed):
    if "hypervisor.cpu_ready_time_ppm" in parsed:
        return[(None, None)]


def check_prism_vm_stats_cpu(_no_item, _no_params, parsed):
    state = 0
    msg_text = ""
    perfdata = []
    cpu_ready = int(parsed.get("hypervisor.cpu_ready_time_ppm"))/10000.0
    cpu_usage = int(parsed.get("hypervisor_cpu_usage_ppm"))/10000.0

    perfdata = [("cpu_usage", cpu_usage),("cpu_ready", cpu_ready)]
    msg_text = "Usage %1.2f%% - CPU ready %1.2f%%" % (cpu_usage, cpu_ready)
    return state, msg_text, perfdata

check_info["prism_vm_stats.cpu"] = {
    "inventory_function": inventory_prism_vm_stats_cpu,
    "check_function": check_prism_vm_stats_cpu,
    "service_description": "NTX CPU",
    "has_perfdata": True,
}

def inventory_prism_vm_stats_mem(parsed):
    if "guest.memory_usage_ppm" in parsed:
        return[(None, None)]


def check_prism_vm_stats_mem(_no_item, _no_params, parsed):
    state = 0
    msg_text = ""
    perfdata = []
    mem_usage_bytes = int(parsed.get("guest.memory_usage_bytes"))
    if mem_usage_bytes == 0:
        return 0, "VM not running no memory check possible", perfdata

    mem_usage = int(parsed.get("guest.memory_usage_ppm"))/10000.0
    mem_total = int(mem_usage_bytes / mem_usage * 100 / 1024 / 1024 ) * 1024 * 1024
    if mem_total < 500000000:
        mem_total = mem_total * 1024
    perfdata = [("mem_used", mem_usage_bytes),("mem_total", mem_total),("mem_used_percent", mem_usage)]
    msg_text = "Usage %1.2f%% - %s from %s" % (mem_usage, get_bytes_human_readable(mem_usage_bytes), get_bytes_human_readable(mem_total))
    return state, msg_text, perfdata

check_info["prism_vm_stats.mem"] = {
    "inventory_function": inventory_prism_vm_stats_mem,
    "check_function": check_prism_vm_stats_mem,
    "service_description": "NTX Memory",
    "has_perfdata": True,
}

