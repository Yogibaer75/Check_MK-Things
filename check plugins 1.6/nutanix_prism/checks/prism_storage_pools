#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Andreas Doehler <andreas.doehler@bechtle.com/andreas.doehler@gmail.com>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_prism_storage_pools(info):
    import ast
    parsed = {}
    data = ast.literal_eval(info[0][0])
    for element in data.get("entities"):
        parsed.setdefault(element.get("name", "unknown"), element)
    return parsed


@get_parsed_item_data
def check_prism_storage_pools(item, params, data):

    num_disk = len(data["disks"])
    factor = 1024 * 1024
    das_cap = float(data["usageStats"].get("storage_tier.das-sata.capacity_bytes",0))
    das_free = float(data["usageStats"].get("storage_tier.das-sata.free_bytes", 0))
    ssd_cap = float(data["usageStats"].get("storage_tier.ssd.capacity_bytes", 0))
    ssd_free = float(data["usageStats"].get("storage_tier.ssd.free_bytes", 0))
    tot_cap = float(data["usageStats"].get("storage.capacity_bytes", 0))
    tot_free = float(data["usageStats"].get("storage.free_bytes", 0))

    yield df_check_filesystem_list(item, params, 
            [(item, tot_cap / factor, tot_free / factor, 0)])

    if das_cap > 0:
        yield 0, "SAS/SATA capacity %s and %s free" % (
            get_bytes_human_readable(das_cap),
            get_bytes_human_readable(das_free)
        )

    if ssd_cap > 0:
        yield 0, "SSD capacity %s and %s free" % (
            get_bytes_human_readable(ssd_cap),
            get_bytes_human_readable(ssd_free)
        )

    yield 0, "%s Disks in storage pool" % num_disk


check_info["prism_storage_pools"] = {
    "parse_function": parse_prism_storage_pools,
    "check_function": check_prism_storage_pools,
    "inventory_function": discover(),
    "has_perfdata": False,
    "service_description": "Storage Pool %s",
    "includes": ["size_trend.include", "df.include"],
    "group": "filesystem",
    "has_perfdata": True,
}

