#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Andreas Doehler <andreas.doehler@bechtle.com/andreas.doehler@gmail.com>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["bacs_string_default_levels"] = {
    "levels": (55, 60),
    "voltage": (14, 15),
    "voltage_lower": (10, 9),
    "temp": (40, 50),
    "temp_lower": (10, 5),
    "resistance": (15, 18),
}


def parse_bacs_string(info):
    scale = 100.0
    parsed = {}
    for i in info:
        parsed[i[0]] = {
            "power": int(i[1]) / scale,
            "overall": int(i[2]) / scale,
            "average": int(i[3]) / scale
        }
    return parsed


def inventory_bacs_string(parsed):
    for item in parsed:
        yield item, {}


def check_bacs_string(item, params, parsed):
    if type(params) == tuple:
        params = {"levels": params}

    params_temp = {}
    if "temp" in params:
        params_temp['levels'] = params['temp']
    if "levels" in params:
        params_temp['levels'] = params['levels']
    if "temp_lower" in params:
        params_temp['levels_lower'] = params['temp_lower']

    perfdata = []
    infotext = ""
    if item in parsed:
        data = parsed[item]
        power = data["power"]
        overall = data["overall"]
        average = data["average"]
        perfdata = [("voltage", float(overall)), ("power", float(power)),
                    ("avg_volt", float(average))]
        yield 0, "String %s - %s Voltage - %s Power - %s Average Voltage" % (item, overall, power,
                                                                             average), perfdata
        res_status = 0
        if power > 0:
            res_status = 1
            infotext += "(warn Battery Power over 0)"
            yield res_status, infotext


check_info["bacs_string"] = {
    "check_function": check_bacs_string,
    "inventory_function": inventory_bacs_string,
    "parse_function": parse_bacs_string,
    "service_description": "BACS String %s",
    "default_levels_variable": "bacs_string_default_levels",
    "has_perfdata": True,  # optional if available
    "snmp_scan_function": lambda oid: ".1.3.6.1.2.1.33" in oid(".1.3.6.1.2.1.1.2.0"),
    "snmp_info": (
        ".1.3.6.1.2.1.33.5.2.7.1",
        [
            1,  # string index
            2,  # string power
            3,  # string overall voltage
            4,  # string average voltage
        ]),
}
